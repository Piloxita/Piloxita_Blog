---
title: "Predicting Stock Price Movements on Earnings Announcements Using Machine Learning"
author: "Long Nguyen"
date: "2025-01-15"
categories: [news, trading, machine learning]
image: "image.jpg"
---

# Introduction

It started like many trading days before—a quiet anticipation as I scrolled through earnings reports, scanning for opportunities. But this time, something clicked. Over the years, I’d noticed a recurring pattern: earnings announcements often sent stock prices soaring or tumbling. These moments, while fleeting, held immense potential for profit.

I decided to dig deeper. Could machine learning, with its ability to uncover hidden patterns in data, help me predict the magnitude of these price movements? Armed with curiosity, a straddle strategy, and a passion for data, I set out on a journey to merge trading and technology. This post is the story of that journey.

# Collecting and Storing Data

Every story needs a foundation, and in this case, it’s data. To predict stock price movements, I needed to gather the right ingredients:

- **Technical Patterns:** Indicators like moving averages and resistance/support levels that reveal market trends.
- **Sentiment Indicators:** The put/call ratio, a barometer of market sentiment during earnings seasons.
- **Historical Earnings Movements:** Data on how stock prices reacted to past earnings announcements.

I meticulously compiled these features, ensuring they were well-organized in Excel for easy analysis. Think of it as laying the groundwork for a house—the more solid your foundation, the better the outcome.

# Input and Clean Data

Once my data was in place, the next step was to clean and prepare it for analysis. This is where the real magic happens:

1. **Importing Data:** Using Python’s `pandas` library to read the Excel file into a structured format.
2. **Preprocessing:**
   - Filling in missing values like a detective piecing together a puzzle.
   - Normalizing numerical features to ensure consistency across the dataset.
   - Encoding categorical variables so the machine learning models could make sense of them.

Data preparation might seem tedious, but it’s the unsung hero of any successful machine learning project. Without clean data, even the best algorithms can falter.

# Training Models

With my data prepped, it was time to bring in the heavy hitters: **LightGBM**, **XGBoost**, and **CatBoost**. These ensemble models are like a dream team for structured financial data, each bringing unique strengths to the table.

- **LightGBM:** Lightning-fast and efficient for handling large datasets.
- **XGBoost:** Renowned for precision and adaptability.
- **CatBoost:** A natural choice for datasets with categorical variables.

However, with a limited dataset, I faced a tough decision: should I fine-tune the models or stick with their default settings? To avoid overfitting, I chose the latter, focusing on creating a balanced baseline instead. Here’s a snippet of how I trained the models:

```python
from lightgbm import LGBMRegressor
from xgboost import XGBRegressor
from catboost import CatBoostRegressor

# Initialize models
models = [
    LGBMRegressor(),
    XGBRegressor(),
    CatBoostRegressor(verbose=0)
]

# Train models
for model in models:
    model.fit(X_train, y_train)

# Evaluate
for model in models:
    print(f"{model.__class__.__name__} Score: {model.score(X_test, y_test)}")
```

# Making Predictions and Setting Up a Trade

The moment of truth arrived. With my models trained, I ran predictions on the most recent data point. It felt like peering into the future, albeit with some uncertainty:

1. **Interpreting Results:** The models provided a confidence level for the magnitude of the upcoming price movement.
2. **Executing the Straddle Strategy:** Using the prediction, I bought both a call and a put option at the same strike price, ensuring I could profit from significant price swings in either direction.

# Conclusion

Looking back, this journey was as much about discovery as it was about trading. Here’s what I learned:

- **Key Takeaways:** Machine learning has immense potential in options trading, offering insights that were once hidden in the noise of the market.
- **Limitations:** My small dataset and lack of hyperparameter tuning left room for improvement. But every limitation is an invitation to grow.
- **Potential:** With more data and fine-tuning, this approach could become a game-changer for traders worldwide.
- **Disclaimer:** This analysis is educational and should not be considered financial advice.

---

Trading is as much an art as it is a science. By combining a tried-and-tested strategy with cutting-edge machine learning, I’ve uncovered a new way to approach the market. The question is: are you ready to explore it for yourself?
