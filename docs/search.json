[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nI’m Long Nguyen"
  },
  {
    "objectID": "posts/Option_trading/index.html",
    "href": "posts/Option_trading/index.html",
    "title": "Predicting Stock Price Movements on Earnings Announcements Using Machine Learning",
    "section": "",
    "text": "Introduction\nIt started like many trading days before—a quiet anticipation as I scrolled through earnings reports, scanning for opportunities. But this time, something clicked. Over the years, I’d noticed a recurring pattern: earnings announcements often sent stock prices soaring or tumbling. These moments, while fleeting, held immense potential for profit.\nI decided to dig deeper. Could machine learning, with its ability to uncover hidden patterns in data, help me predict the magnitude of these price movements? Armed with curiosity, a straddle strategy, and a passion for data, I set out on a journey to merge trading and technology. This post is the story of that journey.\n\n\nCollecting and Storing Data\nEvery story needs a foundation, and in this case, it’s data. To predict stock price movements, I needed to gather the right ingredients:\n\nTechnical Patterns: Indicators like moving averages and resistance/support levels that reveal market trends.\nSentiment Indicators: The put/call ratio, a barometer of market sentiment during earnings seasons.\nHistorical Earnings Movements: Data on how stock prices reacted to past earnings announcements.\n\nI meticulously compiled these features, ensuring they were well-organized in Excel for easy analysis. Think of it as laying the groundwork for a house—the more solid your foundation, the better the outcome.\n\n\nInput and Clean Data\nOnce my data was in place, the next step was to clean and prepare it for analysis. This is where the real magic happens:\n\nImporting Data: Using Python’s pandas library to read the Excel file into a structured format.\nPreprocessing:\n\nFilling in missing values like a detective piecing together a puzzle.\nNormalizing numerical features to ensure consistency across the dataset.\nEncoding categorical variables so the machine learning models could make sense of them.\n\n\nData preparation might seem tedious, but it’s the unsung hero of any successful machine learning project. Without clean data, even the best algorithms can falter.\n\n\nTraining Models\nWith my data prepped, it was time to bring in the heavy hitters: LightGBM, XGBoost, and CatBoost. These ensemble models are like a dream team for structured financial data, each bringing unique strengths to the table.\n\nLightGBM: Lightning-fast and efficient for handling large datasets.\nXGBoost: Renowned for precision and adaptability.\nCatBoost: A natural choice for datasets with categorical variables.\n\nHowever, with a limited dataset, I faced a tough decision: should I fine-tune the models or stick with their default settings? To avoid overfitting, I chose the latter, focusing on creating a balanced baseline instead. Here’s a snippet of how I trained the models:\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\n\n# Initialize models\nmodels = [\n    LGBMRegressor(),\n    XGBRegressor(),\n    CatBoostRegressor(verbose=0)\n]\n\n# Train models\nfor model in models:\n    model.fit(X_train, y_train)\n\n# Evaluate\nfor model in models:\n    print(f\"{model.__class__.__name__} Score: {model.score(X_test, y_test)}\")\n\n\nMaking Predictions and Setting Up a Trade\nThe moment of truth arrived. With my models trained, I ran predictions on the most recent data point. It felt like peering into the future, albeit with some uncertainty:\n\nInterpreting Results: The models provided a confidence level for the magnitude of the upcoming price movement.\nExecuting the Straddle Strategy: Using the prediction, I bought both a call and a put option at the same strike price, ensuring I could profit from significant price swings in either direction.\n\n\n\nConclusion\nLooking back, this journey was as much about discovery as it was about trading. Here’s what I learned:\n\nKey Takeaways: Machine learning has immense potential in options trading, offering insights that were once hidden in the noise of the market.\nLimitations: My small dataset and lack of hyperparameter tuning left room for improvement. But every limitation is an invitation to grow.\nPotential: With more data and fine-tuning, this approach could become a game-changer for traders worldwide.\nDisclaimer: This analysis is educational and should not be considered financial advice.\n\n\nTrading is as much an art as it is a science. By combining a tried-and-tested strategy with cutting-edge machine learning, I’ve uncovered a new way to approach the market. The question is: are you ready to explore it for yourself?"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Predicting Stock Price Movements on Earnings Announcements Using Machine Learning\n\n\n\n\n\n\nnews\n\n\ntrading\n\n\nmachine learning\n\n\n\n\n\n\n\n\n\nJan 15, 2025\n\n\nLong Nguyen\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 14, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 11, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  }
]